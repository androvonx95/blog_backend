# Blog Backend API Tests

### GET Home Page
GET http://localhost:5000/

### GET About Me Page
GET http://localhost:5000/aboutMe

### GET All Posts (Public)
GET http://localhost:5000/posts/

### GET Specific Post (Public)
GET http://localhost:5000/posts/1

### POST Register New User
POST http://localhost:5000/auth/register
Content-Type: application/json

{
    "username": "testuser",
    "password": "password123"
}

### POST Login User
POST http://localhost:5000/auth/login
Content-Type: application/json

{
    "username": "testuser",
    "password": "password123"
}

### POST Create New Post (Authenticated)
POST http://localhost:5000/admin/newPost
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsImlhdCI6MTc0OTkyNzMwOCwiZXhwIjoxNzQ5OTYzMzA4fQ.gr5Y6pEzZQa3qqMATNaKkhnqrsOITXWf64Y6uH0vhfA

{
    "title": "Test Post",
    "content": "This is a test post",
    "published": true
}

### PUT Update Post (Authenticated)
PUT http://localhost:5000/admin/updatePost/1
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsImlhdCI6MTc0OTkyNzMwOCwiZXhwIjoxNzQ5OTYzMzA4fQ.gr5Y6pEzZQa3qqMATNaKkhnqrsOITXWf64Y6uH0vhfA

{
    "title": "Updated Post",
    "content": "This post has been updated",
    "published": true
}

### DELETE Post (Authenticated)
DELETE http://localhost:5000/admin/deletePost/1
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsImlhdCI6MTc0OTkyNzMwOCwiZXhwIjoxNzQ5OTYzMzA4fQ.gr5Y6pEzZQa3qqMATNaKkhnqrsOITXWf64Y6uH0vhfA

### ------------------------------------------------------

### --- ERROR CASES ---

### GET Non-existent Post
GET http://localhost:5000/posts/99999

### POST Register with Invalid Data
POST http://localhost:5000/auth/register
Content-Type: application/json

{
    "username": "",
    "password": ""
}

### POST Login with Invalid Credentials
POST http://localhost:5000/auth/login
Content-Type: application/json

{
    "username": "nonexistent",
    "password": "wrongpassword"
}

### Access Protected Route Without Token (Should Fail)
POST http://localhost:5000/admin/newPost
Content-Type: application/json

{
    "title": "Unauthorized Post",
    "content": "This should fail",
    "published": true
}

# This request should return a 401 Unauthorized status because 
#it's trying to access a protected route without a valid JWT token. 
#The middleware should catch this and return a 401 status code.